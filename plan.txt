we are going to have instance variables _beginTime and _endTime. both will be in ms. we will utilize the currentTimeMillis() method from the embedded System library

we are going to copy over code from the library for both our Binary and Linear Search methods

we decided to measure time in the Driver file and not within the Binary/Linear Search files.

we will change the sizes of the array by a multitude of 10 each time

we will use a for/while loop in our driver file to repeat our experiment multiple times. we will then average out the time elapsed per trial to get more accurate results. (specifically, we will do it 20 times per array). we will need for loops to create AND populate arrays in our Driver file.

for our arrays, we are thinking of having lengths of 10,1000,100000,10000000,1000000000.

we will change whether or not the item is in the array to create varying test cases.

---

an array with the length 1,000,000 took only a max of 4ms (for LinSearch, 0ms for BinSearch) -> so we're trying out an arrays 100,000,000+ elements

we created instance variables for the start time, end time, and duration of both Linear and Binary methods. This simplified our code to be more
easily understood.

we will make this experiment repeatable by utilizing for loops to repeat the same code multiple times and averaging the result. this increases the
legitamacy of our results

---

the gallery walk revealed to us that we should have more trials per array length so we doubled our number of trials.

we also added the sum of the durations of the trials per array length to get results that could be easily understood.

we discussed whether the worst case scenario was an item not in the array or the last item in the array. we were a little confused but decided to change the target to be the last element of the array.
